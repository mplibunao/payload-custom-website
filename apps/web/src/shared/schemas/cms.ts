/**
 * ATTENTION. This code was AUTO GENERATED by ts2typebox. While I don't know
 * your use case, there is a high chance that direct changes to this file get
 * lost. Consider making changes to the underlying Typescript code you use to
 * generate this file instead. The default file is called "types.ts", perhaps
 * have a look there! :]
 */

import { Type } from '@sinclair/typebox'

export const Nav = Type.Array(
	Type.Object({
		link: PageLink,
		id: Type.Optional(Type.String()),
	}),
)

export const Config = Type.Object({
	collections: Type.Object({
		pages: Page,
		studies: Study,
		media: Media,
		'form-submissions': FormSubmission,
		categories: Category,
		users: User,
	}),
	globals: Type.Object({
		'mega-menu': MegaMenu,
		'social-media': SocialMedia,
		footer: Footer,
		site: Site,
	}),
})

export const Page = Type.Object({
	id: Type.String(),
	title: Type.String(),
	heroType: Type.Union([
		Type.Literal('minimal'),
		Type.Literal('contentAboveMedia'),
		Type.Literal('contentLeftOfMedia'),
	]),
	heroContent: Type.Array(
		Type.Object(
			{},
			{
				additionalProperties: Type.Unknown(),
			},
		),
	),
	heroMedia: Type.Union([Type.String(), Media]),
	layout: Type.Array(
		Type.Union([
			CTA,
			ContentBlockType,
			CTAGridBlockType,
			MediaBlockType,
			Type.Object({
				media: Type.Optional(
					Type.Array(
						Type.Object({
							media: Type.Union([Type.String(), Media]),
							id: Type.Optional(Type.String()),
						}),
					),
				),
				id: Type.Optional(Type.String()),
				blockName: Type.Optional(Type.String()),
				blockType: Type.Literal('media-collage'),
			}),
			Type.Object({
				backgroundColor: BackgroundColorType,
				content: Type.Array(
					Type.Object(
						{},
						{
							additionalProperties: Type.Unknown(),
						},
					),
				),
				enableCTA: Type.Optional(Type.Boolean()),
				link: Type.Optional(PageLink),
				media: Type.Optional(
					Type.Array(
						Type.Object({
							media: Type.Union([Type.String(), Media]),
							id: Type.Optional(Type.String()),
						}),
					),
				),
				id: Type.Optional(Type.String()),
				blockName: Type.Optional(Type.String()),
				blockType: Type.Literal('media-content-collage'),
			}),
			Type.Object({
				backgroundColor: BackgroundColorType,
				content: Type.Optional(
					Type.Array(
						Type.Object(
							{},
							{
								additionalProperties: Type.Unknown(),
							},
						),
					),
				),
				media: Type.Optional(
					Type.Array(
						Type.Object({
							media: Type.Union([Type.String(), Media]),
							content: Type.Optional(Type.String()),
							id: Type.Optional(Type.String()),
						}),
					),
				),
				id: Type.Optional(Type.String()),
				blockName: Type.Optional(Type.String()),
				blockType: Type.Literal('media-grid'),
			}),
			Type.Object({
				topOverlap: Type.Optional(
					Type.Union([
						Type.Literal('none'),
						Type.Literal('small'),
						Type.Literal('medium'),
						Type.Literal('large'),
					]),
				),
				bottomOverlap: Type.Optional(
					Type.Union([
						Type.Literal('none'),
						Type.Literal('small'),
						Type.Literal('medium'),
						Type.Literal('large'),
					]),
				),
				stats: Type.Optional(
					Type.Array(
						Type.Object({
							stat: Type.Optional(Type.String()),
							description: Type.Optional(Type.String()),
							id: Type.Optional(Type.String()),
						}),
					),
				),
				media: Type.Optional(
					Type.Array(
						Type.Object({
							media: Type.Union([Type.String(), Media]),
							id: Type.Optional(Type.String()),
						}),
					),
				),
				id: Type.Optional(Type.String()),
				blockName: Type.Optional(Type.String()),
				blockType: Type.Literal('media-stat-collage'),
			}),
			Type.Object({
				backgroundColor: BackgroundColorType,
				slides: Type.Optional(
					Type.Array(
						Type.Object({
							media: Type.Union([Type.String(), Media]),
							id: Type.Optional(Type.String()),
						}),
					),
				),
				id: Type.Optional(Type.String()),
				blockName: Type.Optional(Type.String()),
				blockType: Type.Literal('slider'),
			}),
			Type.Object({
				size: Type.Union([
					Type.Literal('small'),
					Type.Literal('medium'),
					Type.Literal('large'),
				]),
				id: Type.Optional(Type.String()),
				blockName: Type.Optional(Type.String()),
				blockType: Type.Literal('spacer'),
			}),
			Type.Object({
				backgroundColor: BackgroundColorType,
				topOverlap: Type.Optional(
					Type.Union([
						Type.Literal('none'),
						Type.Literal('small'),
						Type.Literal('medium'),
						Type.Literal('large'),
					]),
				),
				bottomOverlap: Type.Optional(
					Type.Union([
						Type.Literal('none'),
						Type.Literal('small'),
						Type.Literal('medium'),
						Type.Literal('large'),
					]),
				),
				stats: Type.Optional(
					Type.Array(
						Type.Object({
							stat: Type.Optional(Type.String()),
							description: Type.Optional(Type.String()),
							id: Type.Optional(Type.String()),
						}),
					),
				),
				id: Type.Optional(Type.String()),
				blockName: Type.Optional(Type.String()),
				blockType: Type.Literal('statistics'),
			}),
			Type.Object({
				sections: Type.Optional(
					Type.Array(
						Type.Object({
							label: Type.String(),
							description: Type.String(),
							id: Type.Optional(Type.String()),
						}),
					),
				),
				id: Type.Optional(Type.String()),
				blockName: Type.Optional(Type.String()),
				blockType: Type.Literal('sticky-content'),
			}),
			Type.Object({
				backgroundColor: BackgroundColorType,
				studies: Type.Union([Type.Array(Type.String()), Type.Array(Study)]),
				id: Type.Optional(Type.String()),
				blockName: Type.Optional(Type.String()),
				blockType: Type.Literal('study-slider'),
			}),
		]),
	),
	slug: Type.String(),
	meta: Meta,
	updatedAt: Type.String(),
	createdAt: Type.String(),
})

export const Media = Type.Object({
	id: Type.String(),
	alt: Type.String(),
	updatedAt: Type.String(),
	createdAt: Type.String(),
	url: Type.Optional(Type.String()),
	filename: Type.Optional(Type.String()),
	mimeType: Type.Optional(Type.String()),
	filesize: Type.Optional(Type.Number()),
	width: Type.Optional(Type.Number()),
	height: Type.Optional(Type.Number()),
	sizes: Type.Optional(
		Type.Object({
			'original-webp': Type.Optional(
				Type.Object({
					url: Type.Optional(Type.String()),
					width: Type.Optional(Type.Number()),
					height: Type.Optional(Type.Number()),
					mimeType: Type.Optional(Type.String()),
					filesize: Type.Optional(Type.Number()),
					filename: Type.Optional(Type.String()),
				}),
			),
			card: Type.Optional(
				Type.Object({
					url: Type.Optional(Type.String()),
					width: Type.Optional(Type.Number()),
					height: Type.Optional(Type.Number()),
					mimeType: Type.Optional(Type.String()),
					filesize: Type.Optional(Type.Number()),
					filename: Type.Optional(Type.String()),
				}),
			),
			portrait: Type.Optional(
				Type.Object({
					url: Type.Optional(Type.String()),
					width: Type.Optional(Type.Number()),
					height: Type.Optional(Type.Number()),
					mimeType: Type.Optional(Type.String()),
					filesize: Type.Optional(Type.Number()),
					filename: Type.Optional(Type.String()),
				}),
			),
			square: Type.Optional(
				Type.Object({
					url: Type.Optional(Type.String()),
					width: Type.Optional(Type.Number()),
					height: Type.Optional(Type.Number()),
					mimeType: Type.Optional(Type.String()),
					filesize: Type.Optional(Type.Number()),
					filename: Type.Optional(Type.String()),
				}),
			),
			feature: Type.Optional(
				Type.Object({
					url: Type.Optional(Type.String()),
					width: Type.Optional(Type.Number()),
					height: Type.Optional(Type.Number()),
					mimeType: Type.Optional(Type.String()),
					filesize: Type.Optional(Type.Number()),
					filename: Type.Optional(Type.String()),
				}),
			),
			og: Type.Optional(
				Type.Object({
					url: Type.Optional(Type.String()),
					width: Type.Optional(Type.Number()),
					height: Type.Optional(Type.Number()),
					mimeType: Type.Optional(Type.String()),
					filesize: Type.Optional(Type.Number()),
					filename: Type.Optional(Type.String()),
				}),
			),
		}),
	),
})

export const CTA = Type.Object({
	backgroundColor: BackgroundColorType,
	content: Type.Array(
		Type.Object(
			{},
			{
				additionalProperties: Type.Unknown(),
			},
		),
	),
	actions: Type.Optional(
		Type.Array(
			Type.Object({
				link: PageLink,
				id: Type.Optional(Type.String()),
			}),
		),
	),
	id: Type.Optional(Type.String()),
	blockName: Type.Optional(Type.String()),
	blockType: Type.Literal('cta'),
})

export const BackgroundColorType = Type.Object({
	color: Type.Union([
		Type.Literal('none'),
		Type.Literal('red'),
		Type.Literal('blue'),
		Type.Literal('orange'),
		Type.Literal('yellow'),
		Type.Literal('gray'),
		Type.Literal('black'),
	]),
	colorPicker: Type.String(),
})

export const PageLink = Type.Object({
	type: Type.Optional(
		Type.Union([Type.Literal('reference'), Type.Literal('custom')]),
	),
	newTab: Type.Optional(Type.Boolean()),
	reference: Type.Optional(
		Type.Object({
			value: Type.Union([Type.String(), Page]),
			relationTo: Type.Literal('pages'),
		}),
	),
	url: Type.String(),
	label: Type.String(),
	appearance: Type.Optional(
		Type.Union([
			Type.Literal('default'),
			Type.Literal('primary'),
			Type.Literal('secondary'),
		]),
	),
})

export const ContentBlockType = Type.Object({
	backgroundColor: BackgroundColorType,
	columns: Type.Array(
		Type.Object({
			width: Type.Union([
				Type.Literal('oneThird'),
				Type.Literal('half'),
				Type.Literal('twoThirds'),
				Type.Literal('full'),
			]),
			alignment: Type.Union([
				Type.Literal('left'),
				Type.Literal('center'),
				Type.Literal('right'),
			]),
			content: Type.Array(
				Type.Object(
					{},
					{
						additionalProperties: Type.Unknown(),
					},
				),
			),
			id: Type.Optional(Type.String()),
		}),
	),
	accentLine: Type.Optional(Type.Boolean()),
	accentLineAlignment: Type.Optional(
		Type.Union([Type.Literal('left'), Type.Literal('right')]),
	),
	paddingTop: Type.Union([
		Type.Literal('none'),
		Type.Literal('small'),
		Type.Literal('medium'),
		Type.Literal('large'),
	]),
	paddingBottom: Type.Union([
		Type.Literal('none'),
		Type.Literal('small'),
		Type.Literal('medium'),
		Type.Literal('large'),
	]),
	id: Type.Optional(Type.String()),
	blockName: Type.Optional(Type.String()),
	blockType: Type.Literal('content'),
})

export const CTAGridBlockType = Type.Object({
	actions: Type.Array(
		Type.Object({
			headline: Type.String(),
			icon: Type.Optional(
				Type.Union([Type.Literal('none'), Type.Literal('arrow')]),
			),
			link: PageLink,
			id: Type.Optional(Type.String()),
		}),
	),
	id: Type.Optional(Type.String()),
	blockName: Type.Optional(Type.String()),
	blockType: Type.Literal('cta-grid'),
})

export const MediaBlockType = Type.Object({
	media: Type.Union([Type.String(), Media]),
	type: Type.Union([
		Type.Literal('normal'),
		Type.Literal('fullscreen'),
		Type.Literal('wide'),
	]),
	caption: Type.Optional(
		Type.Array(
			Type.Object(
				{},
				{
					additionalProperties: Type.Unknown(),
				},
			),
		),
	),
	id: Type.Optional(Type.String()),
	blockName: Type.Optional(Type.String()),
	blockType: Type.Literal('media'),
})

export const Study = Type.Recursive((This) =>
	Type.Object({
		id: Type.String(),
		title: Type.String(),
		featuredMedia: Type.Union([Type.String(), Media]),
		layout: Type.Optional(
			Type.Array(
				Type.Union([
					CTA,
					ContentBlockType,
					CTAGridBlockType,
					MediaBlockType,
					Type.Object({
						media: Type.Optional(
							Type.Array(
								Type.Object({
									media: Type.Union([Type.String(), Media]),
									id: Type.Optional(Type.String()),
								}),
							),
						),
						id: Type.Optional(Type.String()),
						blockName: Type.Optional(Type.String()),
						blockType: Type.Literal('media-collage'),
					}),
					Type.Object({
						backgroundColor: BackgroundColorType,
						content: Type.Array(
							Type.Object(
								{},
								{
									additionalProperties: Type.Unknown(),
								},
							),
						),
						enableCTA: Type.Optional(Type.Boolean()),
						link: Type.Optional(PageLink),
						media: Type.Optional(
							Type.Array(
								Type.Object({
									media: Type.Union([Type.String(), Media]),
									id: Type.Optional(Type.String()),
								}),
							),
						),
						id: Type.Optional(Type.String()),
						blockName: Type.Optional(Type.String()),
						blockType: Type.Literal('media-content-collage'),
					}),
					Type.Object({
						backgroundColor: BackgroundColorType,
						content: Type.Optional(
							Type.Array(
								Type.Object(
									{},
									{
										additionalProperties: Type.Unknown(),
									},
								),
							),
						),
						media: Type.Optional(
							Type.Array(
								Type.Object({
									media: Type.Union([Type.String(), Media]),
									content: Type.Optional(Type.String()),
									id: Type.Optional(Type.String()),
								}),
							),
						),
						id: Type.Optional(Type.String()),
						blockName: Type.Optional(Type.String()),
						blockType: Type.Literal('media-grid'),
					}),
					Type.Object({
						topOverlap: Type.Optional(
							Type.Union([
								Type.Literal('none'),
								Type.Literal('small'),
								Type.Literal('medium'),
								Type.Literal('large'),
							]),
						),
						bottomOverlap: Type.Optional(
							Type.Union([
								Type.Literal('none'),
								Type.Literal('small'),
								Type.Literal('medium'),
								Type.Literal('large'),
							]),
						),
						stats: Type.Optional(
							Type.Array(
								Type.Object({
									stat: Type.Optional(Type.String()),
									description: Type.Optional(Type.String()),
									id: Type.Optional(Type.String()),
								}),
							),
						),
						media: Type.Optional(
							Type.Array(
								Type.Object({
									media: Type.Union([Type.String(), Media]),
									id: Type.Optional(Type.String()),
								}),
							),
						),
						id: Type.Optional(Type.String()),
						blockName: Type.Optional(Type.String()),
						blockType: Type.Literal('media-stat-collage'),
					}),
					Type.Object({
						backgroundColor: BackgroundColorType,
						slides: Type.Optional(
							Type.Array(
								Type.Object({
									media: Type.Union([Type.String(), Media]),
									id: Type.Optional(Type.String()),
								}),
							),
						),
						id: Type.Optional(Type.String()),
						blockName: Type.Optional(Type.String()),
						blockType: Type.Literal('slider'),
					}),
					Type.Object({
						size: Type.Union([
							Type.Literal('small'),
							Type.Literal('medium'),
							Type.Literal('large'),
						]),
						id: Type.Optional(Type.String()),
						blockName: Type.Optional(Type.String()),
						blockType: Type.Literal('spacer'),
					}),
					Type.Object({
						backgroundColor: BackgroundColorType,
						topOverlap: Type.Optional(
							Type.Union([
								Type.Literal('none'),
								Type.Literal('small'),
								Type.Literal('medium'),
								Type.Literal('large'),
							]),
						),
						bottomOverlap: Type.Optional(
							Type.Union([
								Type.Literal('none'),
								Type.Literal('small'),
								Type.Literal('medium'),
								Type.Literal('large'),
							]),
						),
						stats: Type.Optional(
							Type.Array(
								Type.Object({
									stat: Type.Optional(Type.String()),
									description: Type.Optional(Type.String()),
									id: Type.Optional(Type.String()),
								}),
							),
						),
						id: Type.Optional(Type.String()),
						blockName: Type.Optional(Type.String()),
						blockType: Type.Literal('statistics'),
					}),
					Type.Object({
						sections: Type.Optional(
							Type.Array(
								Type.Object({
									label: Type.String(),
									description: Type.String(),
									id: Type.Optional(Type.String()),
								}),
							),
						),
						id: Type.Optional(Type.String()),
						blockName: Type.Optional(Type.String()),
						blockType: Type.Literal('sticky-content'),
					}),
					Type.Object({
						backgroundColor: BackgroundColorType,
						studies: Type.Union([Type.Array(Type.String()), Type.Array(This)]),
						id: Type.Optional(Type.String()),
						blockName: Type.Optional(Type.String()),
						blockType: Type.Literal('study-slider'),
					}),
				]),
			),
		),
		previewMedia: Type.Optional(
			Type.Array(
				Type.Object({
					media: Type.Union([Type.String(), Media]),
					id: Type.Optional(Type.String()),
				}),
			),
		),
		client: Type.Optional(Type.String()),
		location: Type.Optional(Type.String()),
		categories: Type.Optional(
			Type.Union([Type.Array(Type.String()), Type.Array(Category)]),
		),
		slug: Type.String(),
		meta: Meta,
		updatedAt: Type.String(),
		createdAt: Type.String(),
	}),
)

export const Category = Type.Object({
	id: Type.String(),
	title: Type.String(),
	slug: Type.String(),
	updatedAt: Type.String(),
	createdAt: Type.String(),
})

export const Meta = Type.Object({
	title: Type.String(),
	description: Type.Optional(Type.String()),
	type: Type.Union([
		Type.Literal('website'),
		Type.Literal('article'),
		Type.Literal('profile'),
		Type.Literal('book'),
		Type.Literal('video.movie'),
		Type.Literal('video.tv_show'),
		Type.Literal('video.episode'),
		Type.Literal('video.other'),
	]),
	article: Type.Optional(MetaArticle),
	book: Type.Optional(MetaBook),
	movie: Type.Optional(MetaMovie),
	videoEpisode: Type.Optional(MetaVideoEpisode),
	videoTvShow: Type.Optional(MetaTVShow),
	videoOther: Type.Optional(MetaVideoOther),
	profile: Type.Optional(MetaProfile),
	ogImage: Type.Optional(Type.Union([Type.String(), Media])),
})

export const MetaArticle = Type.Object({
	author: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	section: Type.Optional(Type.String()),
	tag: Type.Optional(
		Type.Array(
			Type.Object({
				tag: Type.String(),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	publishedAt: Type.Optional(Type.String()),
	updatedAt: Type.Optional(Type.String()),
	outdatedAt: Type.Optional(Type.String()),
})

export const MetaBook = Type.Object({
	author: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	'book:isbn': Type.Optional(Type.String()),
	publishedAt: Type.Optional(Type.String()),
	tag: Type.Optional(
		Type.Array(
			Type.Object({
				tag: Type.String(),
				id: Type.Optional(Type.String()),
			}),
		),
	),
})

export const MetaMovie = Type.Object({
	actor: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				role: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	director: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	writer: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	duration: Type.Optional(Type.Number()),
	releaseDate: Type.Optional(Type.String()),
	tag: Type.Optional(
		Type.Array(
			Type.Object({
				tag: Type.String(),
				id: Type.Optional(Type.String()),
			}),
		),
	),
})

export const MetaVideoEpisode = Type.Object({
	actor: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				role: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	director: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	writer: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	duration: Type.Optional(Type.Number()),
	releaseDate: Type.Optional(Type.String()),
	tag: Type.Optional(
		Type.Array(
			Type.Object({
				tag: Type.String(),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	videoSeries: Type.Optional(
		Type.Object({
			tvShow: Type.Optional(Type.String()),
			actor: Type.Optional(
				Type.Array(
					Type.Object({
						profile: Type.Optional(Type.String()),
						firstName: Type.Optional(Type.String()),
						lastName: Type.Optional(Type.String()),
						username: Type.Optional(Type.String()),
						gender: Type.Optional(Type.String()),
						role: Type.Optional(Type.String()),
						id: Type.Optional(Type.String()),
					}),
				),
			),
			director: Type.Optional(
				Type.Array(
					Type.Object({
						profile: Type.Optional(Type.String()),
						firstName: Type.Optional(Type.String()),
						lastName: Type.Optional(Type.String()),
						username: Type.Optional(Type.String()),
						gender: Type.Optional(Type.String()),
						id: Type.Optional(Type.String()),
					}),
				),
			),
			writer: Type.Optional(
				Type.Array(
					Type.Object({
						profile: Type.Optional(Type.String()),
						firstName: Type.Optional(Type.String()),
						lastName: Type.Optional(Type.String()),
						username: Type.Optional(Type.String()),
						gender: Type.Optional(Type.String()),
						id: Type.Optional(Type.String()),
					}),
				),
			),
			duration: Type.Optional(Type.Number()),
			releaseDate: Type.Optional(Type.String()),
			tag: Type.Optional(
				Type.Array(
					Type.Object({
						tag: Type.String(),
						id: Type.Optional(Type.String()),
					}),
				),
			),
		}),
	),
})

export const MetaTVShow = Type.Object({
	actor: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				role: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	director: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	writer: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	duration: Type.Optional(Type.Number()),
	releaseDate: Type.Optional(Type.String()),
	tag: Type.Optional(
		Type.Array(
			Type.Object({
				tag: Type.String(),
				id: Type.Optional(Type.String()),
			}),
		),
	),
})

export const MetaVideoOther = Type.Object({
	actor: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				role: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	director: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	writer: Type.Optional(
		Type.Array(
			Type.Object({
				profile: Type.Optional(Type.String()),
				firstName: Type.Optional(Type.String()),
				lastName: Type.Optional(Type.String()),
				username: Type.Optional(Type.String()),
				gender: Type.Optional(Type.String()),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	duration: Type.Optional(Type.Number()),
	releaseDate: Type.Optional(Type.String()),
	tag: Type.Optional(
		Type.Array(
			Type.Object({
				tag: Type.String(),
				id: Type.Optional(Type.String()),
			}),
		),
	),
})

export const MetaProfile = Type.Object({
	firstName: Type.Optional(Type.String()),
	lastName: Type.Optional(Type.String()),
	username: Type.Optional(Type.String()),
	gender: Type.Optional(Type.String()),
})

export const FormSubmission = Type.Object({
	id: Type.String(),
	from: Type.Optional(Type.String()),
	message: Type.Optional(Type.String()),
	source: Type.Optional(Type.String()),
	updatedAt: Type.String(),
	createdAt: Type.String(),
})

export const User = Type.Object({
	id: Type.String(),
	updatedAt: Type.String(),
	createdAt: Type.String(),
	email: Type.String(),
	resetPasswordToken: Type.Optional(Type.String()),
	resetPasswordExpiration: Type.Optional(Type.String()),
	salt: Type.Optional(Type.String()),
	hash: Type.Optional(Type.String()),
	loginAttempts: Type.Optional(Type.Number()),
	lockUntil: Type.Optional(Type.String()),
	password: Type.Optional(Type.String()),
})

export const MegaMenu = Type.Object({
	id: Type.String(),
	nav: Type.Optional(Nav),
	updatedAt: Type.Optional(Type.String()),
	createdAt: Type.Optional(Type.String()),
})

export const SocialMedia = Type.Object({
	id: Type.String(),
	links: Type.Optional(
		Type.Array(
			Type.Object({
				label: Type.String(),
				url: Type.String(),
				id: Type.Optional(Type.String()),
			}),
		),
	),
	updatedAt: Type.Optional(Type.String()),
	createdAt: Type.Optional(Type.String()),
})

export const Footer = Type.Object({
	id: Type.String(),
	nav: Type.Optional(Nav),
	updatedAt: Type.Optional(Type.String()),
	createdAt: Type.Optional(Type.String()),
})

export const Site = Type.Object({
	id: Type.String(),
	meta: Type.Object({
		title: Type.String(),
		description: Type.String(),
		twitter: Type.Optional(Type.String()),
		ogImage: Type.Union([Type.String(), Media]),
	}),
	updatedAt: Type.Optional(Type.String()),
	createdAt: Type.Optional(Type.String()),
})
